技术关键点
1.编译当前的根目录下的所有的文件和文件夹.

细节问题:
1.路径的时候,有时候需要\,有时候需要\\
2.可以使用系统自带的api,自动遍历出所有的文件.
3.遍历参数共有三个参数,第一个是路径,第二个是文件夹,第二个是里面文件的内容. 注意第二个和第三个文件是否为空.或许第二个文件夹可以不用考虑.
4.非常好,如果有空的文件夹,可以自动不生成相关的内容.
#5.如果两个大文件夹,一个有一个文件,另一个没有(也就是根目录下文件数量和名字不一样),会出现什么问题?
6.经过测试,发现虽然能够生成.diff命令,但是因为diff命令却不能执行了,因为将系统变量中配置的cygwin环境去掉了.
7.添加之后,发现,只要原文件和修改后的文件,只要有一个不存在,那么就不能够正常地生成最终的文件.diff.
8.根据遍历生成的路径,开始循环做diff,
#9. 输入路径后,需要校验路径是否正确.目前先简单地比较两者之间是否正常
10.发现python字符串长度无限制,可以将其先放入到字符串当中,最后一起放到里面.最多也就几K吧.
11.经过测试,发现如果在window中直接运行批处理,可以直接创建文件夹,但是在python当中,不能直接创建文件夹,需要提前创建好.
12. 关键字不能直接转化成字符串.
13. 无论有没有变化,都会生成一个diff文件.this is not good.在batch命令下做文章,貌似不行.在python下也不行...
14. 经过测试,发现还有问题,如果文件夹和文件的名字含有空格的话,处理起来会有问题.
// 尝试使用新的命令,先获取command命令的结果,然后根据command命令来进行相关处理,决定是否要创建新的文件.
15. 经过测试,发现,在只有一个文件的情况下,如果两个文件没有区别,那么输出的结果是None
	如果两个文件中有修改,修改位置不止一处,但是依旧只显示一个 标准输出.
	如果两个文件有两处修改,那么打印的将会显示出两个变化的位置.但是貌似打印的速度慢?所以diff结果显示在后面?
#16.如果文件名字不规范,可以进行warning. 如果两个文件夹不一样,可以进行相关的提示,比如提示增加了文件,还是删除了文件.
//初次探讨结果.
17. 如果两个文件夹中的文件不一样,使用diff命令,将没有内容输出.
18. 使用patch命令,会一直提示错误?
19. 如果有两个文件名字一样,将进行提示.
20. 或使用已有的函数.
21. 完善注释.
22. 中文字符进行相关的处理.
//真实项目操作发现的问题:
1. 读取文件夹path也需要加双引号, 否则不能正常判断出文件的内容.
2. 需要完善的内容,第一,如果path有错误,那么将检测出.
3. 如果文件夹当中的内容不一样,那么将有可能出现判断失误.
!!4. 判断该文件夹当中是否有重复的文件.判断相关的交集文件和差集文件.
5. 发现exe 文件和pyc文件也会有相关的变化,所以需要将这些文件去除掉.
6. diff + orginal_file + " " + modified_file
7. patch orginal_file + " " + diff_file 
